set.seed(52550)
title_word_pairs %>%
  filter(n >= 40) %>%
  graph_from_data_frame() %>%
  ggraph(layout = "fr") + #use ?ggraph to see all the options
  geom_edge_link(aes(edge_alpha = n, edge_width = n), edge_colour = "purple") +
  geom_node_point(size = 5) +
  geom_node_text(aes(label = name), repel = TRUE, 
                 point.padding = unit(0.2, "lines")) +
  theme_void()
  
  
  by_chapter_text_doc <-  by_chapter_text_doc[-grep("[0-9]", by_chapter_text_doc$word), ] 
by_chapter_text_doc <-  by_chapter_text_doc[-grep("chapter", by_chapter_text_doc$word), ] 
head(by_chapter_text_doc)


keyword_cors %>%
  filter(correlation > .6) %>%
  graph_from_data_frame() %>%
  ggraph(layout = "fr") +
  geom_edge_link(aes(edge_alpha = correlation, edge_width = correlation), edge_colour = "purple") +
  geom_node_point(size = 5) +
  geom_node_text(aes(label = name), repel = TRUE,
                 point.padding = unit(0.2, "lines")) +
  theme_void()


rpackages <- c('papaja', 'knitr', 'citr', 'car','mlogit','readr','Amelia','caTools', 'dplyr', 'rpart', 'mlogit', 'nnet', 'ggplot2', 'caret', 'MASS', 'corrplot', 'gridExtra', 'randomForest', 'tidyverse', 'broom','moments')

for(p in packages){
  if(!require(p,character.only = TRUE)) install.packages(p, dependencies = TRUE)
  suppressMessages(library(p,character.only = TRUE, quietly = TRUE))
}


IF CONTAINS(UPPER([Strategic Priority ORG]),"ZDNU") THEN
    IF REGEXP_MATCH(UPPER([Strategic Priority ORG]),'^ZDNU\s\d{4}\s\-\s\S')
    THEN REGEXP_EXTRACT(UPPER([Strategic Priority ORG]),'^ZDNU\s\d{4}\s\-\s(.*)')
    ELSEIF REGEXP_MATCH(UPPER([Strategic Priority ORG]),'^ZDNU\s\d{4}\s\S')
    THEN REGEXP_EXTRACT(UPPER([Strategic Priority ORG]),'^ZDNU\s\d{4}\s(.*)')
    END
ELSE
[Strategic Priority ORG]
END

RemoveHTMLTags = function(htmlString) {
  return(gsub("<.*?>", " ", htmlString))}

RemoveWhiteSpaces = function(string) {
  return(gsub("\\s+", " ",string))}

#RemoveURLs = function(string) {
#  return(gsub(" ?(f|ht)tp(s?)://(.*)[.][a-z]+", " ",string))}

RemoveURLs = function(string) {
  return(gsub("(https?://(?:www[.]|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9][.][^\\s]{2,}|www[.][a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9][.][^\\s]{2,}|https?://(?:www[.]|(?!www))[a-zA-Z0-9]+[.][^\\s]{2,}|www[.][a-zA-Z0-9]+[.][^\\s]{2,}|https?://(?:go/)[a-zA-Z0-9]+|go/[a-zA-Z0-9]+)", " ",string, perl=TRUE))}

#RemoveUSAAgoURLs = function(string) {
#  return(gsub(" ?(f|ht)tp(s?)://go/(.*)[a-z]+(/?)", " ",string))}

RemoveEmails = function(string) {
  return(gsub("\\S+@\\S+", " ",string))}




Working with Python
Load the Python libraries and import the dataset from R.
import scipy.cluster.hierarchy as sch
from sklearn.cluster import AgglomerativeClustering
import matplotlib
matplotlib.use('Agg')
from matplotlib import pyplot as plt

sim_data = r.df 
#create distances
sim_dist = sch.linkage(sim_data, method='ward')
Create a dendogram of the variables.
##python chunk 
plt.figure()
plt.title("Hierarchical Clustering Dendogram")
plt.xlabel("Causal Variable")
plt.ylabel("Distance")
# create dendrogram
sch.dendrogram(sim_dist, #distance
              leaf_rotation=90., leaf_font_size=8.,
              labels = r.cluster_labels) #create tree
              
              
              
              plt.show()
              
              from sklearn import metrics
from scipy.cluster.hierarchy import fcluster

max_d = 49
for i in range(2, max_d):
  sil = metrics.silhouette_score(sim_data, fcluster(sim_dist, i, criterion='maxclust'), metric='euclidean')
  print(i, ":", sil)
  
  
  
  # Graphical Representation
import matplotlib.pyplot as plt
new_labels = km.labels_
fig,axes = plt.subplots(1,2,figsize=(16,8))
axes[0].scatter(X[:,0],X[:,1],c=y,cmap='gist_rainbow',edgecolor='k',s=150)
axes[1].scatter(X[:,0],X[:,1],c=new_labels,cmap='jet',edgecolor='k',s=150)
axes[0].set_xlabel('Sepal length',fontsize=18)
axes[0].set_ylabel('Sepal width',fontsize=18)
axes[1].set_xlabel('Sepal length',fontsize=18)
axes[1].set_ylabel('Sepal width',fontsize=18)
axes[0].tick_params(direction='in',length=10,width=5,colors='k',labelsize=20)
axes[1].tick_params(direction='in',length=10,width=5,colors='k',labelsize=20)
axes[0].set_title('Actual',fontsize=18)
axes[1].set_title('Predicted',fontsize=18)
plt.show()


# Dendrogram example
# create dendrogram
import scipy.cluster.hierarchy as sch
from sklearn.cluster import AgglomerativeClustering
#import sklearn.cluster
dendrogram = sch.dendrogram(sch.linkage(X, method='ward'))
# create clusters
hc = AgglomerativeClustering(n_clusters=4,affinity ='euclidean',linkage ='ward')
# save clusters for chart
y_hc = hc.fit_predict(X)



from scipy.cluster.hierarchy import dendrogram,linkage
# generate the linkage matrix
Z = linkage(X,'average')
# set cut-off to 50
max_d = 7.08
# max_das in max_distance
plt.figure(figsize=(25,10))
plt.title('Iris Hierarchical Clustering Dendrogram')
plt.xlabel('Species')
plt.ylabel('distance')
dendrogram(Z,truncate_mode = 'lastp',# show only the last p merged clusters
           p= 10,# Try changing values of p
           leaf_rotation = 90.,# rotates the x axis labels
           leaf_font_size = 8.,# font size for the x axis labels
          )
plt.axhline(y=max_d , c='k')
plt.show


corr = AAA.corr()
fig = plt.figure()
ax = fig.add_subplot(111)
cax = ax.matshow(corr,cmap='coolwarm', vmin=-1, vmax=1)
fig.colorbar(cax)
ticks = np.arange(0,len(AAA.columns),1)
ax.set_xticks(ticks)
plt.xticks(rotation=90)
ax.set_yticks(ticks)
ax.set_xticklabels(AAA.columns)
ax.set_yticklabels(AAA.columns)
plt.show()
